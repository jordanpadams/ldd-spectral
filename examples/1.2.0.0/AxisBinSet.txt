Spectral Dictionary Code Sample: Explicitly Defined Bin Sets

This file shows example sections of a (fake) label to illustrate how to use 
the "Axis Bin Set" option to define spectral bin centers and widths for
a character table containing one spectrum per row in the "Tabulated-Flat"
format (where each point in the spectrum is in a separately defined field).  
(The "Axis" reference is a historical carry-over and may be dropped in future
development.) Typically, most spectra presented as arrays have too many bins 
to make defining each in the label a viable option. This option can also be 
used with other forms of spectral tables.

The example below is for a flat table of spectra where the spectral dimension 
is wave number.  The appropriate unit-specific classes would be used for 
wavelength and frequency spectra.  (Axis_Bin_set_Wavelength, etc. would be
used for wavelength spectra, for example.)
        
============================================================================        

The Spectral_Characteristics class appears in the <Discipline_Area> of the  
label.  Classes within the Spectral_Characteristics that are required to be 
present but not relevant to specifying bin parameters are elided.


    <sp:Spectral_Characteristics>
        <Local_Internal_Reference>
            <!--
                Note the correspondence between the identifier below, the
                specific local_reference_type, and the array definition
                following.
            -->
            <local_identifier_reference>TabFlat</local_identifier_reference>
            <local_reference_type>spectral_characteristics_to_table_object</local_reference_type>
        </Local_Internal_Reference>
        <sp:spectrum_format>Tabulated-Flat</sp:spectrum_format>
        <!--
            In the associated table, the spectral measurements are not contiguous.  Thus the
            value_field_number_list is used to identify them by field_number.
        -->
        <sp:value_field_number_list>(2,3,4,5)</sp:value_field_number_list>
        <sp:spectral_bin_type>wavenumber</sp:spectral_bin_type>
        <sp:Field_of_View>
            ....
        </sp:Field_of_View>
        <sp:Bin_Description>
            <sp:bin_profile_description>
                <!-- 
                    Provide a description of HOW the bin widths were determined/defined here. In this
                    example we should how to define your bin width as "unknown", so the description
                    here would be along the lines of "Bin width was not reported for this data and
                    could not be recovered during archive preparation."
                -->
            </sp:bin_profile_description>
            <sp:Axis_Bin_Set_Wavenumber>
                <!--
                    The value "Field" is required when the target object is a table.  If this were
                    an array, the value would be the name of the axis representing the bin 
                    dimension.
                -->
                <sp:axis_name>Field</sp:axis_name>
                <sp:Bin_Wavenumber>
                    <sp:bin_sequence_number>1</sp:bin_sequence_number>
                    <sp:center_wavenumber unit="1/nm">0.00333</sp:center_wavenumber>
                    <sp:bin_width_wavenumber unit="1/nm" xsi:nil="true" nilReason="unknown"/>
                </sp:Bin_Wavenumber>
                <sp:Bin_Wavenumber>
                    <sp:bin_sequence_number>2</sp:bin_sequence_number>
                    <sp:center_wavenumber unit="1/nm">0.00400</sp:center_wavenumber>
                    <sp:bin_width_wavenumber unit="1/nm" xsi:nil="true" nilReason="unknown"/>
                </sp:Bin_Wavenumber>
                <sp:Bin_Wavenumber>
                    <sp:bin_sequence_number>3</sp:bin_sequence_number>
                    <sp:center_wavenumber unit="1/nm">0.00500</sp:center_wavenumber>
                    <sp:bin_width_wavenumber unit="1/nm" xsi:nil="true" nilReason="unknown"/>
                </sp:Bin_Wavenumber>
                <sp:Bin_Wavenumber>
                    <sp:bin_sequence_number>4</sp:bin_sequence_number>
                    <sp:center_wavenumber unit="1/nm">0.00667</sp:center_wavenumber>
                    <sp:bin_width_wavenumber unit="1/nm" xsi:nil="true" nilReason="unknown"/>
                </sp:Bin_Wavenumber>
            </sp:Axis_Bin_Set_Wavenumber>
        </sp:Bin_Description>
    </sp:Spectral_Characteristics>

    
Here is a mock-up of the corresponding Table_Character containing one tiny spectrum
per row.  Note the use of <field_number>, necessary to use the <sp:value_field_number_list>
attribute, above. Also note that a real data table definition would have substantially 
more description than this does.
        
    <Table_Character>
        <name>Flat Spectra Table</name>
        <local_identifier>TabFlat</local_identifier>
        <offset unit="byte">0</offset>
        <records>1000</records>
        <description>
                In this format, each row of the table contains a single spectrum, and the fields (columns) are defined without
                the use of "Group_Field" classes.  This spectrum has only 4 points, and the bin parameters will be specified
                as part of the Spectral Characteristics.
        </description>
        <record_delimiter>Carriage-Return Line-Feed</record_delimiter>
        <Record_Character>
            <fields>5</fields>
            <groups>0</groups>
            <record_length unit="byte">82</record_length>
                
            <Field_Character>
                <name>Target Name</name>
                <field_number>1</field_number>
                <field_location unit="byte">1</field_location>
                <data_type>ASCII_String</data_type>
                <field_length unit="byte">19</field_length>
                <field_format>%-19s</field_format>
            </Field_Character>
                
            <Field_Character>
                <name>Point 1 Value</name>
                <field_number>2</field_number>
                <field_location unit="byte">20</field_location>
                <data_type>ASCII_Integer</data_type>
                <field_length unit="byte">4</field_length>
                <field_format>%4d</field_format>
                <unit>DN</unit>
            </Field_Character>
                
            <Field_Character>
                <name>Point 2 Value</name>
                <field_number>3</field_number>
                <field_location unit="byte">35</field_location>
                <data_type>ASCII_Integer</data_type>
                <field_length unit="byte">4</field_length>
                <field_format>%4d</field_format>
                <unit>DN</unit>
            </Field_Character>
                
            <Field_Character>
                <name>Point 3 Value</name>
                <field_number>4</field_number>
                <field_location unit="byte">50</field_location>
                <data_type>ASCII_Integer</data_type>
                <field_length unit="byte">4</field_length>
                <field_format>%4d</field_format>
                <unit>DN</unit>
            </Field_Character>
                
            <Field_Character>
                <name>Point 4 Value</name>
                <field_number>5</field_number>
                <field_location unit="byte">65</field_location>
                <data_type>ASCII_Integer</data_type>
                <field_length unit="byte">4</field_length>
                <field_format>%4d</field_format>
                <unit>DN</unit>
            </Field_Character>
        </Record_Character>
    </Table_Character>
